#!/usr/bin/env bash

###
# Get program run dir , Check Debug is enabled, export Script name
###
program_run_dir="$HOME/.mirrorfy"
export mirrorfy_script_name="$0"
#debug="on"
if [ ! -z $debug ]
then
  if [ "$debug" = "on" ]
  then
    set -x
  else
    echo "You are define debug variable but this variable is not equal to on. Dobug is aborted."
  fi
fi


####
# Some default variables for if its not defined
####
rsync_arguments_default=-avzhp --delete
remote_port_default="22"

pids_count=0
#pids_count=$((pids_count + 1))
###
# Load mirrorfy sync lists
###
load_ini () {
  fixed_file=$(cat $1 | sed 's/ = /=/g')  # fix ' = ' to be '='
  IFS=$'\n' && ini=( $fixed_file )              # convert to line-array
  ini=( ${ini[*]//;*/} )                   # remove comments
  ini=( ${ini[*]/#[/\}$'\n'mirrorfy.sync.} ) # set section prefix
  ini=( ${ini[*]/%]/ \(} )                 # convert text2function (1)
  ini=( ${ini[*]/=/=\( } )                 # convert item to array
  ini=( ${ini[*]/%/ \)} )                  # close array parenthesis
  ini=( ${ini[*]/%\( \)/\(\) \{} )         # convert text2function (2)
  ini=( ${ini[*]/%\} \)/\}} )              # remove extra parenthesis
  ini[0]=''                                # remove first element
  ini[${#ini[*]} + 1]='}'                  # add the last brace
  eval "$(echo "${ini[*]}")"               # eval the result
}


###
# Check require programs for mirrorfy
###
check_required_program() {
  # Check Rsync

  #Common shell
  if hash bash 2>/dev/null
  then
    shell_script="bash"
  else
    err_on_exit="yes"
  fi

  #mostly used in alpine
  if [ ! -z $err_on_exit ]
  then
    if [ "$err_on_exit" = "yes" ]
    then
      if hash ash 2>/dev/null
      then
        shell_script="ash"
      else
        echo >&2 "Bash or ash is required but it's not installed. Please install bash"; err_on_exit="yes"
      fi
    fi
  fi

  if ! hash rsync 2>/dev/null
  then
    echo >&2 "rsync is required but it's not installed. Please install rsync"; err_on_exit="yes"
  fi
  # Check inotifywait
  if ! hash inotifywait 2>/dev/null
  then
    echo >&2 "inotifywait is required but it's not installed. Please install inotify-tools"; err_on_exit="yes"
  fi
  # Check ssh for rsync
  if ! hash ssh 2>/dev/null
  then
    echo >&2 "ssh is required but it's not installed. Please install openssh"; err_on_exit="yes"
  fi


  if [ ! -z $err_on_exit ]
  then
    if [ "$err_on_exit" = "yes" ]
    then
      echo >&2 "Aborting ..."
      exit 1
    fi
  fi
}


sync_list() {
  if test -f "mirrorfy.list"; then
    echo "$(pwd)/mirrorfy.list"
  else
    echo "$HOME/.mirrorfy.list"
  fi
}

folder_watch_daemon() {
  local local_dir_local=$local_dir
  local remote_address_local=$remote_address
  local remote_dir_local=$remote_dir
  local remote_port_local=$remote_port
  local rsync_arguments_local=$rsync_arguments
  if [ "$run_once" == "yes" ]
  then
    rsync $rsync_arguments -e "ssh -p $remote_port" $local_dir $remote_address:$remote_dir
  else
    while inotifywait -r -q -e modify,create,delete,move $local_dir
    do
      rsync $rsync_arguments -e "ssh -p $remote_port" $local_dir $remote_address:$remote_dir
    done
  fi
}



check_sync_variables() {
  sync_name=`printf "$line" | sed 's/mirrorfy.sync.//'`
  if [ -z $local_dir ]
  then
    echo "    folder directory is not defined in $sync_name"
  else
    if [ -d $local_dir ]
    then

      if [ -z $remote_address ]
      then
        echo "    Remote address is not defined in $sync_name"
      else
        if [ -z $remote_dir ]
        then
          echo "    Remote directory is not defied $sync_name"
        else
          if [ -z $remote_port ]
          then
            remote_port=$remote_port_default
          fi
          if [ -z $rsync_arguments ]
          then
            rsync_arguments=$rsync_arguments_default
          fi
          folder_watch_daemon &
          pids[${pids_count}]=$!
          pids_count=$((pids_count + 1))
          unset local_dir remote_address remote_dir remote_port rsync_arguments
        fi
      fi

    else
      echo "    $local_dir  does not exist on your filesystem."
    fi
  fi
}

sync_list_print() {
  load_ini `sync_list`
  echo "Sync file `sync_list`
  "
  while read -r line
  do
    printf "$line" | sed 's/mirrorfy.sync.//'
    $line
    echo "
    local_dir $local_dir
    remote_address $remote_address
    remote_dir $remote_dir"
    if [ -z $remote_port ]
    then
      echo "    remote_port 22"
    else
      echo "    remote_port $remote_port"
    fi
    if [ -z $rsync_arguments ]
    then
      echo "    rsync_arguments $rsync_arguments_default"
    else
      echo "    rsync_arguments $rsync_arguments"
    fi
    unset local_dir remote_address remote_dir remote_port rsync_arguments

  done < <(declare -F | grep "mirrorfy.sync" |sed 's/declare -f //')
}

mirrorfy_start() {
  echo "Starting mirrorfy deamon"

  load_ini `sync_list`

  while read -r line
  do
    echo "  $line" | sed 's/mirrorfy.sync.//'
    $line
    check_sync_variables
    unset local_dir remote_address remote_dir remote_port rsync_arguments
  done < <(declare -F | grep mirrorfy.sync |sed 's/declare -f //')

  for pid in ${pids[*]}; do
      wait $pid
  done
}


####
# Help function
####
help() {
  echo "
  mirrorfy v 0.2
  Avaible Commands

    $0 list
      List every sync with configs

    $0 start
      Start daemon

    $0 run
      One time run
  "
}

check_required_program

####
# Command line argument parser
####
case $1 in

  list)
    sync_list_print
  ;;
  start)
    mirrorfy_start
  ;;
  run)
    run_once=yes
    mirrorfy_start
  ;;

  *)

  help
  ;;
esac

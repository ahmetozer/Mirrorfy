#!/usr/bin/env bash

###
# Get program run dir , Check Debug is enabled, export Script name
###
mkdir -p /tmp/mirrorfy
cd /tmp/mirrorfy
program_run_dir="$HOME/.mirrorfy"
export mirrorfy_script_name="$0"
#debug="on"
if [ ! -z $debug ]
then
  if [ "$debug" = "on" ]
  then
    set -x
  else
    echo "You are define debug variable but this variable is not equal to on. Dobug is aborted."
  fi
fi


####
# Some default variables for if its not defined
####
rsync_arguments_default='-avzhp --delete'
remote_port_default="22"

pids_count=0
#pids_count=$((pids_count + 1))
###
# Load mirrorfy sync lists
###
load_ini () {
  fixed_file=$(cat $1 | sed 's/ = /=/g')  # fix ' = ' to be '='
  IFS=$'\n' && ini=( $fixed_file )              # convert to line-array
  ini=( ${ini[*]//;*/} )                   # remove comments
  ini=( ${ini[*]/#[/\}$'\n'mirrorfy.sync.} ) # set section prefix
  ini=( ${ini[*]/%]/ \(} )                 # convert text2function (1)
  ini=( ${ini[*]/=/=\( } )                 # convert item to array
  ini=( ${ini[*]/%/ \)} )                  # close array parenthesis
  ini=( ${ini[*]/%\( \)/\(\) \{} )         # convert text2function (2)
  ini=( ${ini[*]/%\} \)/\}} )              # remove extra parenthesis
  ini[0]=''                                # remove first element
  ini[${#ini[*]} + 1]='}'                  # add the last brace
  eval "$(echo "${ini[*]}")"               # eval the result
}


###
# Check require programs for mirrorfy
###
check_required_program() {
  # Check Rsync

  #Common shell
  if hash bash 2>/dev/null
  then
    shell_script="bash"
  else
    err_on_exit="yes"
  fi

  #mostly used in alpine
  if [ ! -z $err_on_exit ]
  then
    if [ "$err_on_exit" = "yes" ]
    then
      if hash ash 2>/dev/null
      then
        shell_script="ash"
      else
        echo >&2 "Bash or ash is required but it's not installed. Please install bash"; err_on_exit="yes"
      fi
    fi
  fi

  if ! hash rsync 2>/dev/null
  then
    echo >&2 "rsync is required but it's not installed. Please install rsync"; err_on_exit="yes"
  fi
  # Check inotifywait
  if ! hash inotifywait 2>/dev/null
  then
    echo >&2 "inotifywait is required but it's not installed. Please install inotify-tools"; err_on_exit="yes"
  fi
  # Check ssh for rsync
  if ! hash ssh 2>/dev/null
  then
    echo >&2 "ssh is required but it's not installed. Please install openssh"; err_on_exit="yes"
  fi


  if [ ! -z $err_on_exit ]
  then
    if [ "$err_on_exit" = "yes" ]
    then
      echo >&2 "Aborting ..."
      exit 1
    fi
  fi
}


sync_list() {
  if test -f "mirrorfy.list"; then
    echo "$(pwd)/mirrorfy.list"
  else
    echo "$HOME/.mirrorfy.list"
  fi
}
check_sync_list() {
  if test -f "mirrorfy.list"; then
    echo "$(pwd)/mirrorfy.list"
  else
    if test -f "$HOME/.mirrorfy.list"; then
      echo "$HOME/.mirrorfy.list"
    else
      echo "Config is not found."
    fi
  fi
}

folder_watch_daemon() {
  local local_dir_local=$local_dir
  local remote_address_local=$remote_address
  local remote_dir_local=$remote_dir
  local remote_port_local=$remote_port
  local rsync_arguments_local
  IFS=' ' read -a rsync_arguments_local <<< $rsync_arguments

  if [ "$run_once" == "yes" ]
  then
   rsync ${rsync_arguments_local[@]}  -e "ssh -p $remote_port_local" $local_dir_local $remote_address:$remote_dir
  else
    while inotifywait -r -q -e modify,create,delete,move $local_dir_local
    do
      rsync ${rsync_arguments_local[@]} -e "ssh -p $remote_port_local" $local_dir_local $remote_address_local:$remote_dir_local
    done
  fi
}



check_sync_variables() {
  sync_name=`printf "$line" | sed 's/mirrorfy.sync.//'`
  if [ -z $local_dir ]
  then
    echo "    folder directory is not defined in $sync_name"
  else
    if [ -d $local_dir ]
    then

      if [ -z $remote_address ]
      then
        echo "    Remote address is not defined in $sync_name"
      else
        if [ -z $remote_dir ]
        then
          echo "    Remote directory is not defied $sync_name"
        else
          if [ -z $remote_port ]
          then
            remote_port=$remote_port_default
          fi
          if [ -z $rsync_arguments ]
          then
            rsync_arguments=$rsync_arguments_default
          fi
          folder_watch_daemon &
          pids[${pids_count}]=$!
          pids_count=$((pids_count + 1))
          unset local_dir remote_address remote_dir remote_port rsync_arguments
        fi
      fi

    else
      echo "    $local_dir  does not exist on your filesystem."
    fi
  fi
}
port_regex="^((6553[0-5])|(655[0-2][0-9])|(65[0-4][0-9]{2})|(6[0-4][0-9]{3})|([1-5][0-9]{4})|([1-9][0-9]{3})|([1-9][0-9]{2})|([1-9][0-9])|([1-9]))$"

add_sync_directory() {
  shift 1
  #echo $@
  #local local_dir=$(pwd)
  local remote_address remote_dir remote_port rsync_arguments local_dir
  while test $# -gt 0; do
    case "$1" in
      -a|--remote-address)
      remote_address=$2
      shift
      shift
      ;;
      -d|--remote-dir)
      remote_dir=$2
      shift
      shift
      ;;
      -p|--remote-port)
      remote_port=$2
      shift
      shift
      ;;
      -r|--rsync-arguments)
      rsync_arguments=$2
      shift
      shift
      ;;
      -l|--local-dir)
      local_dir=$2
      shift
      shift
      ;;
      -n|--name)
      sync_name=$2
      shift
      shift
      ;;
      *)
      echo "err $1 is unknown flag. Aborted ..."
      exit 1
      ;;
    esac
  done

  if [ -z $sync_name ]
  then
    echo "You have to define sync name with -n flag"
    exit_err+=("err-add-sync-name-not-exist")
  else
    if [[ ! $sync_name =~ ^[0-9a-zA-Z]{1,15}$ ]];
    then
      echo "sync name has a unknow characters  != $sync_name"
      exit_err+=("err-add-sync-name-wrong")
    fi
  fi

  if [ -z $remote_port ]
  then
    remote_port=22
  else
    if [[ ! $remote_port =~ $port_regex ]];
    then
      echo "Please write valid port number != $remote_port"
      exit_err+=("err-add-remote-port-config")
    fi
  fi

  if [ -z $local_dir ]
  then
    local_dir=$(pwd)
  fi

  if [ ! -d $local_dir ];
  then
    echo "$local_dir directory is not exist "
    exit_err+=("err-add-local-dir-not-exist")
  fi

  if [ -z $remote_dir ];
  then
    echo "remote_dir is does not defined, define with -d flag"
    exit_err+=("err-add-remote-dir-not-defined")
  fi

  if [ -z $remote_address ];
  then
    echo "remote_address is does not defined, define with -a flag."
    exit_err+=("err-add-remote-address-not-defined")
  fi

  if [ -z $rsync_arguments ]
  then
    rsync_arguments=$rsync_arguments_default
  fi

  if [ ! -d `dirname $(sync_list)` ]
  then
    echo "Config save directory is not exist"
    exit_err+=("err-add-conf-dir-not-exist")
  fi

  if [ -z $exit_err ]
  then
    echo "These config will be written to `sync_list`
    [$sync_name]
    local_dir=$local_dir
    remote_address=$remote_address
    remote_dir=$remote_dir
    remote_port=$remote_port
    rsync_arguments=$rsync_arguments
    "
    read -p "Do you want to confirm this ? yes or no Â» " -e -i no  question

    if [ "$question" == 'yes' ];
    then
      echo "[$sync_name]
      local_dir=$local_dir
      remote_address=$remote_address
      remote_dir=$remote_dir
      remote_port=$remote_port
      rsync_arguments=\"$rsync_arguments\"" >> `sync_list`
    else
      echo "Config aborted"
    fi
  else
    echo "Setup aborted.
    Errors:  ${exit_err[@]}"
    exit 1
  fi

}

sync_list_print() {
  load_ini `sync_list`
  echo "Sync file `sync_list`
  "
  while read -r line
  do
    printf "$line" | sed 's/mirrorfy.sync.//'
    $line
    echo "
    local_dir $local_dir
    remote_address $remote_address
    remote_dir $remote_dir"
    if [ -z $remote_port ]
    then
      echo "    remote_port 22"
    else
      echo "    remote_port $remote_port"
    fi
    if [ -z $rsync_arguments ]
    then
      echo "    rsync_arguments $rsync_arguments_default"
    else
      echo "    rsync_arguments $rsync_arguments"
    fi
    unset local_dir remote_address remote_dir remote_port rsync_arguments

  done < <(declare -F | grep "mirrorfy.sync" |sed 's/declare -f //')
}

mirrorfy_start() {
  echo "Starting mirrorfy deamon"

  load_ini `sync_list`

  while read -r line
  do
    echo "  $line" | sed 's/mirrorfy.sync.//'
    $line
    check_sync_variables
    unset local_dir remote_address remote_dir remote_port rsync_arguments
  done < <(declare -F | grep mirrorfy.sync |sed 's/declare -f //')

  for pid in ${pids[*]}; do
    wait $pid
  done
}

is_windows() {
  uname -r | grep -i microsoft
}

service() {
  case "$1" in
    start)
    SCREENDIR=$HOME/.screen screen -S mirrorfy -dm mirrorfy start
    ;;
    restart)
    SCREENDIR=$HOME/.screen screen -X -S mirrorfy quit
    SCREENDIR=$HOME/.screen screen -S mirrorfy -dm mirrorfy start
    ;;
    stop)
    SCREENDIR=$HOME/.screen screen -X -S mirrorfy quit
    ;;
    register)
    if ! screen ssh 2>/dev/null
    then
      echo >&2 "screen is required but it's not installed. Please install screen"; err_on_exit="yes"
    fi
    if is_windows
    then
      mirrorfy_windows_service_register
    else
      mkdir ~/.config/autostart
      cat <<EOF>> ~/.config/autostart/mirrorfy.desktop
      [Desktop Entry]
Type=Application
Name=mirrorfy
Exec=SCREENDIR=$HOME/.screen screen -S mirrorfy -dm mirrorfy start
Comment=Copy your files to server
EOF
chmod +x ~/.config/autostart/mirrorfy.desktop
    fi
    ;;
    unregistar)
    if is_windows
    then
      mirrorfy_windows_service_unregister
    else
      rm ~/.config/autostart/mirrorfy.desktop
    fi
    ;;
    *)
    echo "err $1 is unknown flag.
    Please use start, restart, stop, register or unregistar  Aborted ..."
    exit 1
    ;;
  esac
  if [ -z $exit_err ]
  then
    exit 1
  fi

}

mirrorfy_windows_service_register() {
  schtasks.exe  /Create /SC ONLOGON /TN mirrorfy /TR 'bash -c "SCREENDIR=$HOME/.screen screen -S mirrorfy -dm mirrorfy start"' /f

}
mirrorfy_windows_service_unregister() {
schtasks.exe /delete /tn "mirrorfy" /f
}
####
# Help function
####
help() {
  echo "
  mirrorfy v 0.2
  Avaible Commands

  $0 list
  List every sync with configs

  $0 start
  Start daemon

  $0 run
  One time run

  $0 add <sync-name>
  Adds current directory to list
  usable flags
  -n config_name
  -a remote_address
  -d remote_dir
  -p remote_port
  -r rsync_arguments
  -l local_dir
  EX. $0 add -n project1 -l /home/ahmet/project1 -d /home/backup/project1 -a 1.1.1.1
  $0 add -n project1 -d /home/backup/project1 -a 1.1.1.1 -p 24
  "
}

check_required_program

if [ ! -z $1 ] && ([ $1 == "list" ] || [ $1 == "start" ] || [ $1 == "run" ])
then
  if [ "Config is not found." == "`check_sync_list`" ]
  then
    check_sync_list
    exit 1
  fi
fi
####
# Command line argument parser
####
case $1 in

  list)
  sync_list_print
  ;;
  start)
  mirrorfy_start
  ;;
  run)
  run_once=yes
  mirrorfy_start
  ;;
  add)
  add_sync_directory $@
  ;;
  service)
  shift 1
  service $@
  ;;
  *)

  help
  ;;
esac

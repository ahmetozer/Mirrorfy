#!/bin/sh

###
# Get program run dir , Check Debug is enabled, export Script name
###
program_run_dir="$HOME/.mirrorfy"
export mirrorfy_script_name="$0"
if [ "$debug" == "on" ]
then
  set -x
fi


###
# Check require programs for mirrorfy
###
function check_required_program {
  # Check Rsync
  if ! hash rsync 2>/dev/null
  then
    echo >&2 "rsync is required but it's not installed. Please install rsync"; err_on_exit="yes"
  fi
  # Check inotifywait
  if ! hash inotifywait 2>/dev/null
  then
     echo >&2 "inotifywait is required but it's not installed. Please install inotify-tools"; err_on_exit="yes"
  fi
  # Check ssh for rsync
  if ! hash ssh 2>/dev/null
  then
     echo >&2 "ssh is required but it's not installed. Please install openssh"; err_on_exit="yes"
  fi

  if [ "$err_on_exit" == "yes" ]
  then
    echo >&2 "Aborting ..."
    exit 1
  fi
}

####
# This function checks the start or renew of the
####

function mirrorfy_folder_watch_daemon_starter {

  local local_dir="`echo $@ | cut -d" " -f 1`"
  local remote_address="`echo $@ | cut -d" " -f 2`"
  local remote_dir="`echo $@ | cut -d" " -f 3`"
  local remote_port="`echo $@ | cut -d" " -f 4`"
  local rsync_arguments="`echo $@ | cut -d" " -f 5`"

  local required_variable_err
  echo  $(( ${#local_dir} + ${#remote_address} + ${#remote_dir} )) asdf  ${local_dir} + ${remote_address} + ${remote_dir}
  if [ ${#local_dir} -le 1 ]
  then
    required_variable_err=1
  fi

  if [ -z $remote_address ]
  then
    required_variable_err=1
  fi

  if [ -z $remote_dir ]
  then
    required_variable_err=1
  fi

  if [ "$required_variable_err" == 1 ]
  then
    echo "Lines has a wrong or miss configuration
    $@ $@ $@"
    return
  fi


  if [ `grep -nr "$remote_address $remote_dir $remote_port" $sync_list | wc -l` -gt 1 ]
  then
    echo "WARN: Address $remote_address port $remote_port dir $remote_dir is duplicated"
    grep -nr "$remote_address $remote_dir $remote_port" $sync_list
  fi


  local proccess_hash
  proccess_hash=$(echo $remote_address$remote_dir$remote_port | md5sum | cut -d' ' -f 1)
  local procstat

  if [ ! -f $program_run_dir/stat/$proccess_hash ]
  then
    echo > $program_run_dir/stat/$proccess_hash
  fi

  procstat=`cat $program_run_dir/stat/$proccess_hash`
  while [ "$procstat" ==  "proccesing" ]
  do
    sleep 1
    procstat=`cat $program_run_dir/stat/$proccess_hash`
  done

  if [ ! -f $program_run_dir/pid/$proccess_hash.pid ]
  then
    kill -9 $(cat $program_run_dir/pid/$proccess_hash.pid)
  fi


  daemon_only=yes $mirrorfy_script_name mirrorfy_folder_watch_daemon $@ &

  echo $! > $program_run_dir/pid/$proccess_hash.pid
}

###
# This is folder tracking daemon.
# it is watchs the folder. if the any changes appears, the functions starts rsync
###
function mirrorfy_folder_watch_daemon {

  # local_dir remote_address remote_dir remote_port rsync_arguments
  local local_dir="`echo $@ | cut -d" " -f 1`"
  local remote_address="`echo $@ | cut -d" " -f 2`"
  local remote_dir="`echo $@ | cut -d" " -f 3`"
  local remote_port="`echo $@ | cut -d" " -f 4`"
  local rsync_arguments="`echo $@ | cut -d" " -f 5`"

  # If port is not defined, set port number to 22 which is default
  if ! [ $remote_port ];
  then
    remote_port="22"
  fi

  # Check custom rsync argument. if is not setted, set to "-avzhp --delete"
  if ! [ $rsync_arguments ];
  then
    rsync_arguments="-avzhp --delete"
  fi

  proccess_hash=$(echo $remote_address$remote_dir$remote_port | md5sum | cut -d' ' -f 1)

  echo "started-but-not-triggered" > $program_run_dir/stat/$proccess_hash

  while inotifywait -r -e modify,create,delete,move $local_dir
  do
    echo proccesing > $program_run_dir/stat/$proccess_hash
    rsync $rsync_arguments -e "ssh -p $remote_port" $local_dir $remote_address:$remote_dir
    echo done > $program_run_dir/stat/$proccess_hash
  done
}

###
# mirrorfy config is normally allocated on $HOME/.mirrorfy/mirrorfy.list
# But each projects is also can have a own config file.
###

function mirrorfy_sync_list {
  if test -f "mirrorfy.list"; then
    echo "$(pwd)/mirrorfy.list"
  else
    echo "$HOME/.mirrorfy/mirrorfy.list"
  fi
}


####
# This function is watch $sync_list file
# if any changes occur, system exec mirrorfy_run function
####
function mirrorfy_list_watcher {
  local sync_list=$(mirrorfy_sync_list)
  if [[ -f "$sync_list" ]]
  then
    while inotifywait -e close_write  $sync_list
    do
      if [ -s "$sync_list" ]
      then
        daemon_only=yes $mirrorfy_script_name mirrorfy_run $@ &
      else
        echo "$sync_list is empty"
      fi
    done
  else
    echo "$sync_list does not found"
    exit
  fi
}

####
# It creates directories for keep trackins status of each directories
# Also starts track daemon for each directories
####

function mirrorfy_run {
  # Check directories
  if [[ ! -d "$program_run_dir" ]]
  then
    mkdir -v $program_run_dir
  fi

  if [[ ! -d "$program_run_dir/stat" ]]
  then
    mkdir -v $program_run_dir/stat/
  fi

  if [[ ! -d "$program_run_dir/pid" ]]
  then
    mkdir -v $program_run_dir/pid
  fi

  # Start mirrorfy_folder_watch_daemon_starter
  local sync_list=$(mirrorfy_sync_list)
  if [[ -f "$sync_list" ]]
  then
    [ -s "$sync_list" ] || `echo "$sync_list is empty"; exit`
    while IFS= read -r p
    do
      if ! [ -z "$p" ] && ! [ "`echo $p | cut -c1`" = "#" ] ;
      then
        echo $p
        daemon_only=yes $mirrorfy_script_name mirrorfy_folder_watch_daemon_starter $p &
      fi
    done < "$sync_list"
  else
    echo "$sync_list does not found"
    exit
  fi
}


####
# Help function
####
function help {
  echo "this is help function"
}


####
# This if prevents exec some functions outside of the system
###
if [ "$1" == "mirrorfy_folder_watch_daemon_starter" ] || [ "$1" == "mirrorfy_folder_watch_daemon" ] || [ "$1" == "mirrorfy_list_watcher" ];
then
  if [ ! "$daemon_only" == "yes" ]
  then
    echo "Error this function is only usable by program"
    exit 1
  fi
fi


####
# Command line argument parser
####
case $1 in

  mirrorfy_folder_watch_daemon_starter)
  shift 1
  mirrorfy_folder_watch_daemon_starter $@
  ;;

  mirrorfy_folder_watch_daemon)
  shift 1
  mirrorfy_folder_watch_daemon	$@
  ;;

  start)
  shift 1
  check_required_program
  mirrorfy_list_watcher	$@
  ;;
  run)
  if [ "$@" == "run" ]
  then
    check_required_program
    mirrorfy_run
  else
    echo $@
    echo "mirrorfy_run does not require arguments"
  fi
  ;;

  *)
  check_required_program
  help
  ;;
esac
